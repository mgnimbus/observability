global:
  clusterDomain: cluster.local
fullnameOverride: loki

serviceAccount:
  create: true
  name: ${role_name}
  annotations:
    eks.amazonaws.com/role-arn: ${role_arn}
  automountServiceAccountToken: true

deploymentMode: Distributed

loki:
  image:
    repository: grafana/loki
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h

  storage:
    type: s3
    bucketNames:
      chunks: ${loki_chunks_bucket}
      ruler: ${loki_ruler_bucket}
    s3:
      region: ${region}

  storage_config:
    aws:
      region: ${region}
      bucketnames: ${loki_chunks_bucket}
    filesystem:
      directory: /var/loki/chunks
    tsdb_shipper:
      active_index_directory: /var/loki/index
      cache_location: /var/loki/cache

  monitoring:
    dashboards:
      enabled: true
    rules:
      enabled: true
    serviceMonitor:
      enabled: true
    selfMonitoring:
      enabled: true
      tenant:
        name: "obsrv"

  structuredConfig:
    auth_enabled: true
    server:
      log_level: warn
    ingester:
      chunk_encoding: snappy
    querier:
      max_concurrent: 4
    pattern_ingester:
      enabled: true
    query_scheduler:
      max_outstanding_requests_per_tenant: 2048
      grpc_client_config:
        grpc_compression: snappy
    query_range:
      parallelise_shardable_queries: true
      results_cache:
        compression: snappy
      index_stats_results_cache:
        compression: snappy
    frontend:
      max_outstanding_per_tenant: 2048
      compress_responses: true
      grpc_client_config:
        grpc_compression: snappy
    frontend_worker:
      grpc_client_config:
        grpc_compression: snappy
    common:
      storage:
        s3:
          bucketnames: ${loki_chunks_bucket}
          region: ${region}
    analytics:
      reporting_enabled: false
    ruler:
      enable_api: true
      storage:
        type: s3
        s3:
          insecure: false
          s3: s3://${loki_ruler_bucket}
          region: ${region}
    limits_config:
      max_label_names_per_series: 40
      allow_structured_metadata: true
      volume_enabled: true
      retention_period: 1h
      split_queries_by_interval: 15m
      max_query_parallelism: 32
      max_queriers_per_tenant: 5
      otlp_config:
        resource_attributes:
          ignore_defaults: true
          attributes_config:
            - action: index_label
              attributes:
                - pod
                - namespace
                - level
                - log.file.path
                - log.file.name
                - k8s.cluster.id

    compactor:
      retention_enabled: true
      delete_request_store: s3
    ingester_client:
      grpc_client_config:
        grpc_compression: snappy
    storage_config:
      boltdb_shipper:
        index_gateway_client:
          grpc_client_config:
            grpc_compression: snappy

gateway:
  enabled: true
  replicas: 1
  containerPort: 8080
  verboseLogging: true
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
  deploymentStrategy:
    type: RollingUpdate
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
  resources:
  limits:
    cpu: 50m
    memory: 512Mi
  requests:
    cpu: 50m
    memory: 128Mi
  ingress:
    enabled: false
    ingressClassName: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
      - host: loki.gowtham.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - loki.gowtham.com
        secretName: loki-tls

ingester:
  replicas: 2
  zoneAwareReplication:
    enabled: false
  persistence:
    enabled: true
    claims:
      - name: data
        size: 10Gi
        storageClass: obsrv-sc
        enableStatefulSetAutoDeletePVC: true
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
querier:
  replicas: 2
  maxUnavailable: 2
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
queryFrontend:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
queryScheduler:
  replicas: 2
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
distributor:
  replicas: 2
  maxUnavailable: 2
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
compactor:
  replicas: 1
  persistence:
    enabled: true
    claims:
      - name: data
        size: 10Gi
        storageClass: obsrv-sc
        enableStatefulSetAutoDeletePVC: true
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
indexGateway:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
chunksCache:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
resultsCache:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi

# optional experimental components
bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

# Enable minio for storage
minio:
  enabled: false

# Zero out replica counts of other deployment modes
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0

test:
  enabled: false
lokiCanary:
  enabled: false
