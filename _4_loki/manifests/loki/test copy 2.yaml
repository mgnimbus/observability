global:
  clusterDomain: cluster.local
fullnameOverride: loki

serviceAccount:
  create: true
  name: ${role_name}
  annotations:
    eks.amazonaws.com/role-arn: ${role_arn}
  automountServiceAccountToken: true

deploymentMode: Distributed

loki:
  image:
    repository: grafana/loki
  schemaConfig:
    configs:
      - from: "2023-01-20"
        index:
          period: 24h
          prefix: index_
        object_store: aws
        schema: v13
        store: tsdb
  storage:
    bucketNames:
      chunks: ${loki_chunks_bucket}
      ruler: ${loki_ruler_bucket}
    type: s3
    s3:
      endpoint: s3.amazonaws.com
      region: ${region}
  storageConfig:
    tsdb_shipper:
      shared_store: aws
      active_index_directory: /var/loki/index
      cache_location: /var/loki/cache
    aws:
      insecure: false
      s3: s3://${loki_ruler_bucket}
      region: ${region}
      s3forcepathstyle: true
      endpoint: s3.amazonaws.com
  monitoring:
    dashboards:
      enabled: true
    rules:
      enabled: true
    serviceMonitor:
      enabled: true
    selfMonitoring:
      enabled: true
      tenant:
        name: "argus"
  structuredConfig:
    auth_enabled: true
    server:
      log_level: warn
    limits_config:
      retention_period: 30d
      split_queries_by_interval: 15m
      max_query_parallelism: 32
      max_queriers_per_tenant: 5
    query_scheduler:
      max_outstanding_requests_per_tenant: 2048
      grpc_client_config:
        grpc_compression: snappy
    query_range:
      parallelise_shardable_queries: true
      results_cache:
        compression: snappy
      index_stats_results_cache:
        compression: snappy
    frontend:
      max_outstanding_per_tenant: 2048
      compress_responses: true
      grpc_client_config:
        grpc_compression: snappy
    frontend_worker:
      grpc_client_config:
        grpc_compression: snappy
    common:
      storage:
        s3:
          bucketnames: ${loki_chunks_bucket}
          region: ${region}
          endpoint: s3.amazonaws.com
    analytics:
      reporting_enabled: false
    ruler:
      storage:
        type: s3
        s3:
          insecure: false
          s3: s3://${loki_ruler_bucket}
          region: us-east-1
          endpoint: s3.amazonaws.com
    compactor:
      retention_enabled: true
      delete_request_store: s3
    ingester_client:
      grpc_client_config:
        grpc_compression: snappy
    storage_config:
      boltdb_shipper:
        index_gateway_client:
          grpc_client_config:
            grpc_compression: snappy

# ServiceMonitor configuration
serviceMonitor:
  enabled: true

# Rules for the Prometheus Operator
prometheusRule:
  enabled: true
  groups:
    - name: loki_rules

# gateway:
#   enabled: true
#   replicas: 1
#   containerPort: 8080
#   verboseLogging: true
#   autoscaling:
#     enabled: false
#     minReplicas: 1
#     maxReplicas: 3
#     targetCPUUtilizationPercentage: 60
#     targetMemoryUtilizationPercentage:
#   deploymentStrategy:
#     type: RollingUpdate
#   image:
#     registry: docker.io
#     repository: nginxinc/nginx-unprivileged
#   resources:
#   limits:
#     cpu: 50m
#     memory: 512Mi
#   requests:
#     cpu: 50m
#     memory: 128Mi

ingester:
  replicas: 2
  zoneAwareReplication:
    enabled: false
  persistence:
    enabled: true
    claims:
      - name: data
        size: 10Gi
        storageClass: obsrv-sc
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
querier:
  replicas: 2
  maxUnavailable: 2
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
queryFrontend:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
queryScheduler:
  replicas: 2
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
distributor:
  replicas: 2
  maxUnavailable: 2
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
compactor:
  replicas: 1
  persistence:
    enabled: true
    claims:
      - name: data
        size: 10Gi
        storageClass: obsrv-sc
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
indexGateway:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
chunksCache:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
resultsCache:
  replicas: 1
  maxUnavailable: 1
  resources:
    limits:
      cpu: 50m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi

# optional experimental components
bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

# Enable minio for storage
minio:
  enabled: false

# Zero out replica counts of other deployment modes
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0

test:
  enabled: false
lokiCanary:
  enabled: false
