name: EKS Deploy (Simple)
run-name: "Deploy by ${{ github.actor }} - ${{ github.event.inputs.environment || 'production' }}"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - development
          - staging
          - production
      dry_run:
        description: "Dry run (plan only)?"
        required: true
        default: false
        type: boolean
      deploy_monitoring:
        description: "Deploy monitoring stack?"
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: ap-south-2
  TF_VERSION: 1.11.3
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  # Deploy core infrastructure
  deploy-core:
    name: "Deploy Core Infrastructure"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [eks, backend, loadbalancer, cert]
        include:
          - component: eks
            directory: ./_1_eks
            order: 1
          - component: backend
            directory: ./_3_backend
            order: 1
          - component: loadbalancer
            directory: ./_1.2.1loadbalancer
            order: 2
          - component: cert
            directory: ./_1.4_cert
            order: 2
      max-parallel: 2
    steps:
      - name: Wait for dependencies
        if: matrix.order > 1
        run: sleep 30

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Deploy ${{ matrix.component }}
        working-directory: ${{ matrix.directory }}
        run: |
          echo "ðŸš€ Deploying ${{ matrix.component }} for ${{ env.ENVIRONMENT }}"

          # Initialize
          terraform init

          # Plan
          terraform plan -out=tfplan

          # Apply if not dry run
          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            terraform apply -auto-approve tfplan
          else
            echo "ðŸ“‹ DRY RUN - Skipping apply"
          fi

  # Deploy monitoring stack
  deploy-monitoring:
    name: "Deploy Monitoring Stack"
    needs: deploy-core
    if: github.event.inputs.deploy_monitoring == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          [
            nginx-ingress,
            grafana,
            loki,
            otel-operator,
            otel-collector,
            meta-monitoring,
          ]
        include:
          - component: nginx-ingress
            directory: ./_1.2.2_nginx_ingress
            order: 1
          - component: grafana
            directory: ./_2_grafana
            order: 1
          - component: loki
            directory: ./_4_loki
            order: 1
          - component: otel-operator
            directory: ./_7_otel_operator
            order: 1
          - component: otel-collector
            directory: ./_8_otel_collector
            order: 2
          - component: meta-monitoring
            directory: ./_meta_monitoring
            order: 2
      max-parallel: 4
    steps:
      - name: Wait for dependencies
        if: matrix.order > 1
        run: sleep 30

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get EKS cluster name
        id: cluster
        run: |
          cd _1_eks
          terraform init
          echo "name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.cluster.outputs.name }}

      - name: Deploy ${{ matrix.component }}
        working-directory: ${{ matrix.directory }}
        run: |
          echo "ðŸš€ Deploying ${{ matrix.component }}"

          terraform init
          terraform plan -out=tfplan

          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            terraform apply -auto-approve tfplan
          else
            echo "ðŸ“‹ DRY RUN - Skipping apply"
          fi

  # Summary
  summary:
    name: "Deployment Summary"
    needs: [deploy-core, deploy-monitoring]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Monitoring**: ${{ github.event.inputs.deploy_monitoring }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Core Infrastructure**: ${{ needs.deploy-core.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Monitoring Stack**: ${{ needs.deploy-monitoring.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployed by @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
