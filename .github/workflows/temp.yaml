# name: EKS Deploy
# run-name: "Deploy infrastructure by ${{ github.actor }}"

# on:
#   workflow_dispatch:
#     inputs:
#       deploy_monitoring:
#         description: "Include monitoring stack?"
#         required: true
#         default: true
#         type: boolean

# env:
#   AWS_REGION: ap-south-2
#   TF_VERSION: 1.12.2

# jobs:
#   # Deploy EKS and backend first
#   primary-infrastructure:
#     name: "Deploy Primary Infrastructure"
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         component: [eks, backend]
#         include:
#           - component: eks
#             directory: ./_1_eks
#           - component: backend
#             directory: ./_3_s3_backend
#       max-parallel: 2
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4.0.2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: Deploy ${{ matrix.component }}
#         working-directory: ${{ matrix.directory }}
#         run: |
#           echo "::group::Deploying ${{ matrix.component }}"
#           terraform init
#           terraform plan -out=tfplan.binary
#           terraform apply -auto-approve tfplan.binary
#           rm -f tfplan.binary
#           echo "::endgroup::"

#   # Deploy secondary infrastructure (load balancer + cert)
#   secondary-infrastructure:
#     name: "Deploy Secondary Infrastructure"
#     needs: primary-infrastructure
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         component: [loadbalancer, cert]
#         include:
#           - component: loadbalancer
#             directory: ./_1.2.1load_balancer
#           - component: cert
#             directory: ./_1.4_cert
#       max-parallel: 2
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4.0.2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: Get EKS cluster name
#         id: cluster
#         run: |
#           cd _1_eks
#           terraform init
#           echo "name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

#       - name: Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.cluster.outputs.name }}

#       - name: Deploy ${{ matrix.component }}
#         working-directory: ${{ matrix.directory }}
#         run: |
#           echo "::group::Deploying ${{ matrix.component }}"
#           terraform init
#           terraform plan -out=tfplan.binary
#           terraform apply -auto-approve tfplan.binary
#           rm -f tfplan.binary
#           echo "::endgroup::"

#   # Deploy monitoring stack (conditionally)
#   monitoring-stack:
#     name: "Deploy Monitoring Stack"
#     needs: secondary-infrastructure
#     if: github.event.inputs.deploy_monitoring == 'true'
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         component: [nginx-ingress, grafana, loki, otel-operator, otel-collector, meta-monitoring]
#         include:
#           - component: nginx-ingress
#             directory: ./_1.2.2_nginx_ingress
#             order: 1
#           - component: grafana
#             directory: ./_2_grafana
#             order: 1
#           - component: loki
#             directory: ./_4_loki
#             order: 1
#           - component: otel-operator
#             directory: ./_7_otel_operator
#             order: 1
#           - component: otel-collector
#             directory: ./_8_otel_collector
#             order: 2
#           - component: meta-monitoring
#             directory: ./_meta_monitoring
#             order: 2
#       max-parallel: 4
#     steps:
#       - name: Wait for dependencies
#         if: matrix.order > 1
#         run: sleep 30

#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4.0.2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: Get EKS cluster name
#         id: cluster
#         run: |
#           cd _1_eks
#           terraform init
#           echo "name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

#       - name: Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.cluster.outputs.name }}

#       - name: Deploy ${{ matrix.component }}
#         working-directory: ${{ matrix.directory }}
#         run: |
#           echo "::group::Deploying ${{ matrix.component }}"
#           terraform init
#           terraform plan -out=tfplan.binary
#           terraform apply -auto-approve tfplan.binary
#           rm -f tfplan.binary
#           echo "::endgroup::"

#   # Summary
#   summary:
#     name: "Deployment Summary"
#     needs: [primary-infrastructure, secondary-infrastructure, monitoring-stack]
#     if: always()
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deployment Summary
#         run: |
#           echo "## Deployment Summary" >>
