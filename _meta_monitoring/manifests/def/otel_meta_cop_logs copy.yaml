mode: "daemonset"

image:
  repository: dockerhub-remote.dock.merck.com/otel/opentelemetry-collector-contrib

serviceAccount:
  name: ${service_account}
  create: false

podAnnotations:
  prometheus.io/path: /metrics
  prometheus.io/port: "8888"
  prometheus.io/scrape: "true"

tolerations:
  - key: "mimir"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "loki"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "tempo"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "grafana"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "otel"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "nobl9agents"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

presets:
  logsCollection:
    enabled: true
  hostMetrics:
    enabled: false
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: true
    extractAllPodAnnotations: true
  kubeletMetrics:
    enabled: false
  kubernetesEvents:
    enabled: true
  clusterMetrics:
    enabled: false

configMap:
  create: true

extraVolumeMounts:
  - name: varlog
    mountPath: /host/var/log
    readOnly: true
  - name: merck-trusted-ca
    mountPath: /etc/ssl/certs
    readOnly: true

extraVolumes:
  - hostPath:
      path: /var/log
    name: varlog
  - configMap:
      name: merck-trusted-ca
    name: merck-trusted-ca

config:
  receivers:
    k8s_events:
    filelog:
      include:
        - /var/log/pods/*/*/*.log
        - /host/var/log/syslog
        - /host/var/log/messages
        - /host/var/log/*.log
      exclude:
        - /var/log/pods/*nginx*/**
        - /host/var/log/falcon-*/**
      start_at: end
      include_file_path: true
      include_file_name: true
      operators:
        - type: router
          id: get-format
          routes:
            - output: parser-docker
              expr: 'body matches "^\\{"'
            - output: parser-crio
              expr: 'body matches "^[^ Z]+ "'
            - output: parser-containerd
              expr: 'body matches "^[^ Z]+Z"'
        - type: regex_parser
          id: parser-crio
          regex: "^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$"
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout_type: gotime
            layout: "2006-01-02T15:04:05.000000000-07:00"
        - type: regex_parser
          id: parser-containerd
          regex: "^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$"
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: "%Y-%m-%dT%H:%M:%S.%LZ"
        - type: json_parser
          id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: "%Y-%m-%dT%H:%M:%S.%LZ"
        - type: move
          from: attributes.log
          to: body
  processors:
    k8sattributes:
      filter:
        node_from_env_var: $${env:K8S_NODE_NAME}
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
    attributes:
      actions:
        - action: insert
          key: loki.attribute.labels
          value:
            - stream
            - filename
  exporters:
    otlp:
      endpoint: "https://otel.${argus_domain_name}:443"
      headers:
        X-Scope-OrgId: ${app_ci_shortname}
      compression: snappy
  service:
    telemetry:
      metrics:
        address: 0.0.0.0:8888
        level: detailed
      logs:
        level: WARN
    extensions: [health_check, headers_setter]
    pipelines:
      logs:
        receivers: [filelog, k8s_events]
        processors:
          [resource, attributes, resourcedetection, filter/noise, batch]
        exporters: [otlp]
ports:
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
resources: {}
