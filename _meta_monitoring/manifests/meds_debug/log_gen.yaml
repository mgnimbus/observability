# Simple PV for EFS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: dctm-logs-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-075172fd8351b4948

---
# PVC for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dctm-logs-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 10Gi

---
# ConfigMap with log generator script
apiVersion: v1
kind: ConfigMap
metadata:
  name: log-generator-script
  namespace: default
data:
  generate-logs.sh: |
    #!/bin/bash
    
    mkdir -p /opt/dctm/dba/log  # Ensure directory exists

    # Function to generate MEDSDEV1 logs
    generate_medsdev_log() {
      local timestamp=$(date '+%Y-%m-%dT%H:%M:%S.%6N')
      local pid=$((RANDOM % 9000 + 1000))
      local session_id=$(printf '%016x' $RANDOM$RANDOM)
      local levels=("info" "warning" "error")
      local level=${levels[$RANDOM % ${#levels[@]}]}

      case $level in
        "info")
          local messages=(
            "[DM_SERVER_I_LISTENING]info:  \"The server is listening on network address (Service Name: dm_MEDSDEV1, Host Name: dcs-ora-0 :V4 IP)\""
            "[DM_WORKFLOW_I_AGENT_START]info:  \"Workflow agent master (pid : $pid, session $session_id) is started sucessfully.\""
            "[DM_SERVER_I_START]info:  \"Sending Initial Docbroker check-point \"" 
            "[DM_SESSION_I_SESSION_START]info:  \"Session $session_id started for user dmadmin.\""
            "[DM_DOCBROKER_I_PROJECTING]info:  \"Sending information to Docbroker located on host (dbr-0.dbr.meds-dev1.svc.cluster.local) with port (1490).  Information: (Config(MEDSDEV1), Proximity(1), Status(Open), Dormancy Status(Active)).\""
          )
          local message=${messages[$RANDOM % ${#messages[@]}]}
          echo "$timestamp  $pid[$pid]  $session_id    $message" >> /opt/dctm/dba/log/MEDSDEV1.log
          ;;
        "warning")
          echo "[Warning]Hostname Resolution for IPV6 failed: -2 for host dcs-ora-0" >> /opt/dctm/dba/log/MEDSDEV1.log
          ;;
        "error")
          local messages=(
            "[DM_SESSION_E_AUTH_FAIL]error:  \"Authentication failed for user testuser\""
            "[DM_QUERY_E_SYNTAX]error:  \"Invalid DQL syntax in query\""
          )
          local message=${messages[$RANDOM % ${#messages[@]}]}
          echo "$timestamp  $pid[$pid]  $session_id    $message" >> /opt/dctm/dba/log/MEDSDEV1.log
          ;;
      esac

      # Sometimes add Java tool options or trace messages
      if [ $((RANDOM % 5)) -eq 0 ]; then
        echo "Picked up JAVA_TOOL_OPTIONS: -Djdk.util.zip.disableZip64ExtraFieldValidation=true -Djava.locale.providers=COMPAT,SPI --add-opens=java.base/java.lang=ALL-UNNAMED" >> /opt/dctm/dba/log/MEDSDEV1.log
      fi

      if [ $((RANDOM % 4)) -eq 0 ]; then
        echo "$timestamp  $pid[$pid]  $session_id    JMS DO_METHOD TRACE LAUNCH: user: dmadmin, session id: $session_id, JMS id: 0802e72380001234, method: D2ImportMassCreateMethod" >> /opt/dctm/dba/log/MEDSDEV1.log
      fi

      # Sometimes add logs without message codes
      if [ $((RANDOM % 3)) -eq 0 ]; then
        echo "$timestamp  $pid[$pid]  $session_id    info: Processing background job queue" >> /opt/dctm/dba/log/MEDSDEV1.log
      fi
    }

    # Main loop to generate logs
    echo "Starting log generation..."
    echo "Creating log files:"
    echo "  - MEDSDEV1: /opt/dctm/dba/log/MEDSDEV1.log"

    # Create initial log entries
    generate_medsdev_log

    while true; do
      if [ $((RANDOM % 3)) -eq 0 ]; then
        generate_medsdev_log
      fi

      # Sleep for a random interval between 1-5 seconds
      sleep $((RANDOM % 5 + 1))
    done
---
apiVersion: v1
kind: Pod
metadata:
  name: dctm-log-generator
  namespace: default
spec:
  containers:
  - name: log-generator
    image: ubuntu:latest
    command: ["/bin/bash", "-c"]
    args:
      - |
        cp /scripts/generate-logs.sh /tmp/generate-logs.sh
        chmod +x /tmp/generate-logs.sh
        exec /tmp/generate-logs.sh
    volumeMounts:
    - name: log-script
      mountPath: /scripts
    - name: efs-dba-logs
      mountPath: /opt/dctm/dba/log
  volumes:
  - name: log-script
    configMap:
      name: log-generator-script
  - name: efs-dba-logs
    persistentVolumeClaim:
      claimName: dctm-logs-pvc

# ---
# # Simple Pod with EFS mounts
# apiVersion: v1
# kind: Pod
# metadata:
#   name: dctm-log-generator
#   namespace: default
# spec:
#   containers:
#   - name: log-generator
#     image: ubuntu:latest
#     command: ["/bin/bash", "-c"]
#     args:
#       - |
#         cp /scripts/generate-logs.sh /tmp/generate-logs.sh
#         chmod +x /tmp/generate-logs.sh
#         exec /tmp/generate-logs.sh
#     volumeMounts:
#     - name: log-script
#       mountPath: /scripts
#     - name: efs-dba-logs
#       mountPath: /opt/dctm/dba/log
#     - name: efs-tomcat-logs
#       mountPath: /opt/dctm/tomcat10.1.30/logs
#   volumes:
#   - name: log-script
#     configMap:
#       name: log-generator-script
#   - name: efs-dba-logs
#     persistentVolumeClaim:
#       claimName: dctm-logs-pvc
#       subPath: dba-logs
#   - name: efs-tomcat-logs
#     persistentVolumeClaim:
#       claimName: dctm-logs-pvc
#       subPath: tomcat-logs
